ble_client:
  - mac_address: ${brush_mac}
    id: ${brush_id}
    name: ${brush_name}
    auto_connect: true
    on_connect:
      then:
        - lambda: |-
            id(${brush_id}_connected) = true;
            ESP_LOGD("ble_client_lambda", "Connected to ${brush_name}");
            id(${brush_id})->pair();
            id(${brush_id}_toothbrush_battery_value).set_update_interval(15 * 1000);
            id(${brush_id}_toothbrush_battery_value).call_setup();
            id(${brush_id}_toothbrush_head_nfc).set_update_interval(10 * 1000);
            id(${brush_id}_toothbrush_head_nfc).call_setup();
            id(${brush_id}_toothbrush_head_id).set_update_interval(11 * 1000);
            id(${brush_id}_toothbrush_head_id).call_setup();
            id(${brush_id}_toothbrush_strength).set_update_interval(10 * 1000);
            id(${brush_id}_toothbrush_strength).call_setup();

    on_disconnect:
      then:
        - lambda: |-
            id(${brush_id}_connected) = false;
            ESP_LOGD("ble_client_lambda", "Disconnected from ${brush_name}");
            id(${brush_id}_toothbrush_battery_value).set_update_interval(UINT32_MAX);
            id(${brush_id}_toothbrush_battery_value).call_setup();
            id(${brush_id}_toothbrush_head_nfc).set_update_interval(UINT32_MAX);
            id(${brush_id}_toothbrush_head_nfc).call_setup();
            id(${brush_id}_toothbrush_head_id).set_update_interval(UINT32_MAX);
            id(${brush_id}_toothbrush_head_id).call_setup();
            id(${brush_id}_toothbrush_strength).set_update_interval(UINT32_MAX);
            id(${brush_id}_toothbrush_strength).call_setup();

globals:
  - id: ${brush_id}_connected
    type: bool
    restore_value: no
    initial_value: "false"

binary_sensor:
  - platform: template
    name: ${brush_name} Connection
    id: ${brush_id}_ble_connection
    icon: "mdi:bluetooth-connect"
    lambda: |-
      return id(${brush_id}_connected);
    device_class: connectivity

sensor:
  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_battery_value
    name: ${brush_name} Battery
    type: characteristic
    service_uuid: 180F
    characteristic_uuid: 2A19
    notify: True
    update_interval: never
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    filters:
      - filter_out: nan

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_active_seconds
    name: ${brush_name} Active Time
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50002
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54090
    notify: True
    update_interval: never
    device_class: duration
    accuracy_decimals: 0
    unit_of_measurement: s
    filters:
      - filter_out: nan
      - filter_out: "0"

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_state_id
    name: ${brush_name} status id
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50001
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54010
    notify: True
    update_interval: never
    internal: true
    filters:
      - filter_out: nan
    on_value:
      then:
        - component.update: ${brush_id}_toothbrush_state

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_mode_id
    name: ${brush_name} mode id
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50002
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54080
    notify: True
    update_interval: never
    internal: true
    filters:
      - filter_out: nan
    on_value:
      then:
        - component.update: ${brush_id}_toothbrush_mode

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_head_id
    name: ${brush_name} head id
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50006
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54220
    notify: True
    update_interval: never
    internal: true
    filters:
      - filter_out: nan
    on_value:
      then:
        - component.update: ${brush_id}_toothbrush_head

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_head_nfc
    name: ${brush_name} head nfc
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50006
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d542a0
    notify: True
    update_interval: never
    internal: true
    filters:
      - filter_out: nan
    on_value:
      then:
        - component.update: ${brush_id}_toothbrush_head

  - platform: ble_client
    ble_client_id: ${brush_id}
    id: ${brush_id}_toothbrush_strength
    icon: "mdi:toothbrush-electric"
    name: ${brush_name} Strength
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50002
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d540b0
    lambda: |-
      return (float(x[0]) + 1);
    notify: True
    update_interval: never
    filters:
      - filter_out: nan

text_sensor:
  - platform: template
    name: ${brush_name} State
    id: ${brush_id}_toothbrush_state
    icon: "mdi:toothbrush-electric"
    update_interval: never
    lambda: |-
      if (id(${brush_id}_toothbrush_state_id).state == 0) {
        return {"Off"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 1) {
        return {"Standby"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 2) {
        return {"Run"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 3) {
        return {"Charge"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 5) {
        return {"Shutdown"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 6) {
        return {"Validate"};
      } else if (id(${brush_id}_toothbrush_state_id).state == 7) {
        return {"LightsOut"};
      } else {
        return {};
      }

  - platform: template
    name: ${brush_name} Mode
    id: ${brush_id}_toothbrush_mode
    icon: "mdi:toothbrush-electric"
    update_interval: never
    lambda: |-
      if (id(${brush_id}_toothbrush_mode_id).state == 0) {
        return {"Clean"};
      } else if (id(${brush_id}_toothbrush_mode_id).state == 1) {
        return {"White+"};
      } else if (id(${brush_id}_toothbrush_mode_id).state == 2) {
        return {"Gum Health"};
      } else if (id(${brush_id}_toothbrush_mode_id).state == 3) {
        return {"Deep Clean+"};
      } else {
        return {};
      }

  - platform: template
    name: ${brush_name} Head
    id: ${brush_id}_toothbrush_head
    icon: "mdi:toothbrush-electric"
    update_interval: never
    lambda: |-
      if (id(${brush_id}_toothbrush_head_nfc).state == 1) {
        if (id(${brush_id}_toothbrush_head_id).state == 0) {
          return {"Adaptive Clean"};
        } else if (id(${brush_id}_toothbrush_head_id).state == 1) {
          return {"Adaptive White"};
        } else if (id(${brush_id}_toothbrush_head_id).state == 2) {
          return {"Tongue Care"};
        } else if (id(${brush_id}_toothbrush_head_id).state == 3) {
          return {"Adaptive Gums"};
        } else {
          return {"Unknown"};
        }
      } else if (id(${brush_id}_toothbrush_head_nfc).state == 0) {
        return {"N/A"};
      } else {
        return {};
      }
