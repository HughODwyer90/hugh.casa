esphome:
  name: pressure
  friendly_name: Pressure
  compile_process_limit: 1

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  level: DEBUG
  logs:
    esp32_ble_tracker: DEBUG
    ble_dump: DEBUG   # tag used by the lambda below

esp32_ble_tracker:
  on_ble_advertise:
    then:
      - lambda: |-
          // x = BLEAdvertisedDeviceRef
          std::string addr = x.address_str();
          ESP_LOGD("ble_dump", "=== BLE ADV FROM %s  RSSI=%d", addr.c_str(), x.get_rssi());
          ESP_LOGD("ble_dump", "  Name: %s", x.get_name().c_str());

          // Raw payload
          auto payload = x.get_payload();
          if (!payload.empty()) {
            std::string phex = "  Payload:";
            for (auto b : payload) {
              char buf[4];
              snprintf(buf, sizeof(buf), " %02X", b);
              phex += buf;
            }
            ESP_LOGD("ble_dump", "%s", phex.c_str());
          }

          // Manufacturer data (id -> bytes)
          for (auto &m : x.get_manufacturer_data()) {
            std::string mstr = "  Manufacturer 0x" + to_hex_string(m.first) + ":";
            for (auto b : m.second) {
              char buf[4];
              snprintf(buf, sizeof(buf), " %02X", b);
              mstr += buf;
            }
            ESP_LOGD("ble_dump", "%s", mstr.c_str());
          }

          // Service UUIDs (advertised)
          for (auto &u : x.get_service_uuids()) {
            ESP_LOGD("ble_dump", "  Service UUID: %s", u.c_str());
          }

          // Service data (uuid -> bytes)
          for (auto &s : x.get_service_data()) {
            std::string sstr = "  ServiceData " + s.first + ":";
            for (auto b : s.second) {
              char buf[4];
              snprintf(buf, sizeof(buf), " %02X", b);
              sstr += buf;
            }
            ESP_LOGD("ble_dump", "%s", sstr.c_str());
          }

          // Helper: print 6-byte MAC as hex (optional)
          ESP_LOGD("ble_dump", "------------------------------");

  # (keep other esp32_ble_tracker options you already have)


wifi:
  ssid: !secret wifi_ssid
  power_save_mode: NONE
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.201
    gateway: 192.168.0.1
    subnet: 255.255.255.0

ota:
  platform: esphome

api:
  encryption:
    key: !secret pressure_api

binary_sensor:
  - platform: gpio
    pin:
      number: 13
      inverted: true
      mode: INPUT_PULLUP
    name: Rug Sensor
    device_class: occupancy
    filters:
      - delayed_on: 0s
      - delayed_off: 5s

  - platform: gpio
    pin:
      number: 15
      inverted: true
      mode: INPUT_PULLUP
    name: Bed Sensor
    device_class: occupancy
    filters:
      - delayed_on: 2s
      - delayed_off: 2s

  - platform: ble_presence
    mac_address: "24:E5:AA:5C:A8:A0"
    name: "Toothbrush"
    timeout: 120s